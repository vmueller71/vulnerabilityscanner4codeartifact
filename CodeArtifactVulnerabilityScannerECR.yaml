AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create resources for vulnerability scanning

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    # Properties:
    #   BucketName: !Sub 'code-artifact-vulnerability-scanner-${AWS::AccountId}-${AWS::Region}'

  CodeArtifactDomain:
    Type: AWS::CodeArtifact::Domain
    Properties:
      DomainName: vulnerabilty-scanner

  CodeArtifactRepository:
    Type: AWS::CodeArtifact::Repository
    Properties:
      DomainName: vulnerabilty-scanner
      DomainOwner: !Ref AWS::AccountId
      RepositoryName: PythonRepository
      ExternalConnections:
        - public:pypi
    DependsOn: CodeArtifactDomain

  EcrRepository:
    Type: AWS::ECR::Repository
    Properties:
      ImageScanningConfiguration:
        ScanOnPush: false
      ImageTagMutability: MUTABLE
      EncryptionConfiguration:
        EncryptionType: AES256

  SnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: InspectorCriticalFinding

  SnsPolicy:
    Type: AWS::SNS::TopicInlinePolicy
    Properties:
      TopicArn: !Ref SnsTopic
      PolicyDocument:
        Version: '2012-10-17'
        Id: CodeArtifactVulnerabilityScannerTopicPolicyId
        Statement:
          - Sid: __owner_statement
            Effect: Allow
            Principal:
              AWS: "*"
            Action: 
              - SNS:Publish
              - SNS:RemovePermission
              - SNS:SetTopicAttributes
              - SNS:DeleteTopic
              - SNS:ListSubscriptionsByTopic
              - SNS:GetTopicAttributes
              - SNS:AddPermission
              - SNS:Subscribe
            Resource: !Ref SnsTopic
            Condition:
              StringEquals:
                AWS:SourceOwner: !Ref AWS::AccountId
          - Sid: AWSEvents_CodeArtifactInspectorFinding
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sns:Publish
            Resource: !Ref SnsTopic
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt CodeArtifactInspectorFindingRule.Arn

  DeadLetterQueue:
    Type: AWS::SQS::Queue

  SqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: CodeArtifactVulnerabilityScannerQueue
      VisibilityTimeout: 120
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy: 
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 4

  SqsPolicy:
    Type: AWS::SQS::QueueInlinePolicy
    Properties:
      Queue: !Ref SqsQueue
      PolicyDocument:
        Version: '2012-10-17'
        Id: CodeArtifactVulnerabilityScannerPolicyId
        Statement:
          - Sid: __owner_statement
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: SQS:*
            Resource: !GetAtt SqsQueue.Arn
          - Sid: AWSEvents_CodeArtifactNewPackage
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt SqsQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt CodeArtifactNewPackageRule.Arn

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Join ["-", ["CodeArtifactPackageScanPolicy", !Select [2, !Split ["/", !Ref "AWS::StackId"]]]]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/CodeArtifactPackageScan'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/CodeArtifactPackageScan:*'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
              - Effect: Allow
                Resource:
                  - !Sub 'arn:aws:s3:::${S3Bucket}/*'
                  - !Sub 'arn:aws:s3:::${S3Bucket}'
                Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:GetBucketAcl'
                  - 's3:GetBucketLocation'
                  - 's3:ListBucket'
              - Effect: Allow
                Action:
                  - 'codebuild:CreateReportGroup'
                  - 'codebuild:CreateReport'
                  - 'codebuild:UpdateReport'
                  - 'codebuild:BatchPutTestCases'
                  - 'codebuild:BatchPutCodeCoverages'
                Resource:
                  - !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/CodeArtifactPackageScan-*'
              - Effect: Allow
                Action:
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:CompleteLayerUpload'
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:InitiateLayerUpload'
                  - 'ecr:PutImage'
                  - 'ecr:UploadLayerPart'
                Resource:
                  - '*'

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: CodeArtifactPackageScan
      Artifacts:
        Type: S3
        Location: !Ref S3Bucket
        Name: codebuild_artifacts
        NamespaceType: NONE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: PACKAGE_NAME
            Type: PLAINTEXT
            Value: urllib3
          - Name: PACKAGE_VERSION
            Type: PLAINTEXT
            Value: 2.2.1
          - Name: IMAGE_REPO_NAME
            Type: PLAINTEXT
            Value: !Ref EcrRepository
          - Name: ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Ref "AWS::AccountId"
          - Name: REGION
            Type: PLAINTEXT
            Value: !Ref "AWS::Region"
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
      ServiceRole: !Ref CodeBuildServiceRole
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2

          phases:
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com

                - echo "Creating sample Python script..."
                - |
                  cat <<EOF > import_package.py
                  import $PACKAGE_NAME

                  print(f'Package $PACKAGE_NAME version $PACKAGE_VERSION imported successfully!')
                  EOF
                - echo "Sample Python script created successfully"

                - echo "Creating Dockerfile..."
                - |
                  cat <<EOF > Dockerfile
                  FROM public.ecr.aws/docker/library/python:3.9-slim
                  WORKDIR /app
                  COPY . /app
                  RUN pip install --no-cache-dir $PACKAGE_NAME==$PACKAGE_VERSION
                  CMD ["python", "import_package.py"]
                  EOF
                - echo "Dockerfile created successfully"

                - echo Construct the image tag
                - export IMAGE_TAG="${PACKAGE_NAME}_${PACKAGE_VERSION}"

            build:
              commands:
                - echo Build started on `date`
                - echo Building the Docker image...          
                - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
                - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG      

            post_build:
              commands:
                - echo Build completed on `date`
                - echo Pushing the Docker image...
                - docker push $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG

  CodeArtifactNewPackageRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Join ["-", ["CodeArtifactNewPackageInlinePolicy", !Select [2, !Split ["/", !Ref "AWS::StackId"]]]]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/CodeArtifactNewPackage:*'
              - Sid: SQS
                Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - !GetAtt SqsQueue.Arn
              - Sid: CodeBuild
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                Resource:
                  - !GetAtt CodeBuildProject.Arn

  CodeArtifactNewPackageFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CodeArtifactNewPackage
      Code:
        ZipFile: |
          import json
          import boto3


          codebuild = boto3.client('codebuild')
          lambda_client = boto3.client('lambda')


          def lambda_handler(event, context):
              for record in event.get('Records', []):
                  if not 'messageId' in record:
                      return {
                          'statusCode': 200,
                          'body': json.dumps('This is not a message from SQS. Aborting mission!')
                      }
                  
                  msg_body = json.loads(record["body"])
                  event_details = msg_body["detail"]
                  if event_details["operationType"] == "Created" and event_details["packageVersionState"] == "Published":
                      package_name = event_details["packageName"]
                      package_version = event_details["packageVersion"]
                      response = codebuild.start_build(
                          projectName="CodeArtifactPackageScan",
                          environmentVariablesOverride=[
                              {
                                  'name': 'PACKAGE_NAME',
                                  'value': package_name,
                                  'type': 'PLAINTEXT'
                              },
                              {
                                  'name': 'PACKAGE_VERSION',
                                  'value': package_version,
                                  'type': 'PLAINTEXT'
                              }
                          ]
                      )
                      print(response)
              return {
                  'statusCode': 200,
                  'body': json.dumps('CodeBuild initiated successfully!')
              }
      Handler: index.lambda_handler
      Role: !GetAtt CodeArtifactNewPackageRole.Arn
      Runtime: python3.12

  SqsLambdaTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt SqsQueue.Arn
      FunctionName: !Ref CodeArtifactNewPackageFunction

  CodeArtifactInspectorFindingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Join ["-", ["CodeArtifactInspectorFindingInlinePolicy", !Select [2, !Split ["/", !Ref "AWS::StackId"]]]]
          PolicyDocument: 
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/CodeArtifactInspectorFinding:*'
              - Sid: SNS
                Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Ref SnsTopic
              - Sid: CodeArtifact
                Effect: Allow
                Action:
                  - codeartifact:UpdatePackageVersionsStatus
                  - codeartifact:ListPackageVersions
                Resource:
                  - !Sub 'arn:aws:codeartifact:${AWS::Region}:${AWS::AccountId}:package/${CodeArtifactDomain.Name}/${CodeArtifactRepository.Name}/*'

  CodeArtifactInspectorFindingFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CodeArtifactInspectorFinding
      Environment:
        Variables:
          domain: !GetAtt CodeArtifactDomain.Name
          domainOwner: !Ref "AWS::AccountId"
          repository: !GetAtt CodeArtifactRepository.Name
          topic_arn: !Ref SnsTopic
      Code:
        ZipFile: |
          import json
          import boto3
          import os


          TARGET_STATUS = "Archived"

          codeartifact = boto3.client('codeartifact')
          sns = boto3.client('sns')


          def lambda_handler(event, context):
              # retrieve package name from event
              try:
                  vulnerable_packages = event["detail"]["packageVulnerabilityDetails"]["vulnerablePackages"]
              except Exception as e:
                  print(event)
                  print(e)
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Something went wrong! Please check the CloudWatch logs')
                  }

              archived_packages = ""
              for pkg in vulnerable_packages:
                  package_name = pkg["name"]
                  package_version = pkg["version"]

                  response = codeartifact.list_package_versions(
                      domain=os.environ["domain"],
                      domainOwner=os.environ["domainOwner"],
                      repository=os.environ["repository"],
                      format='pypi',
                      package=package_name,
                      status='Published'
                  )

                  versions = [x["version"] for x in response["versions"]]
                  if package_version in versions:
                    # change status of CodeArtifact package
                    response = codeartifact.update_package_versions_status(
                          domain=os.environ["domain"],
                          domainOwner=os.environ["domainOwner"],
                          format='pypi',
                          repository=os.environ["repository"],
                          package=package_name,
                          versions=[package_version],
                          expectedStatus='Published',
                          targetStatus=TARGET_STATUS
                      )
                    archived_packages += f'{package_name}: {package_version}\n'
                    print(response)

              if archived_packages:
                sns_message = (
                  "Hello,\n\n"
                  "Amazon Inspector identified some vulnerabilities in recently uploaded CodeArtifact packages.\n\n"
                  "Packages:\n"
                  f"{archived_packages}\n\n"
                  "These packages have been archived and can't be downloaded from CodeArtifact anymore.\n\n"
                  "Best regards,\nYour CodeArtifact Vulernability Scanner"
                )

                message_structure = {
                    'default': json.dumps({'default': 'Default message'}),
                    'email': sns_message
                }

                response = sns.publish(
                    TopicArn=os.environ["topic_arn"],
                    Message=json.dumps(message_structure),
                    Subject="Amazon Inspector Vulnerability Findings",
                    MessageStructure='json'
                )                

              return {
                  'statusCode': 200,
                  'body': json.dumps('Message has been processed!')
              }
      Handler: index.lambda_handler
      Role: !GetAtt CodeArtifactInspectorFindingRole.Arn
      Runtime: python3.12

  CodeArtifactNewPackageRule:
    Type: AWS::Events::Rule
    Properties:
      Name: CodeArtifactNewPackage
      EventPattern:
        source:
          - aws.codeartifact
        detail-type:
          - CodeArtifact Package Version State Change
        account:
          - !Ref "AWS::AccountId"
        region:
          - !Ref "AWS::Region"
        detail:
          domainName:
            - !GetAtt CodeArtifactDomain.Name
          domainOwner:
            - !Ref "AWS::AccountId"
          repositoryName:
            - !GetAtt CodeArtifactRepository.Name
          packageFormat:
            - pypi
          packageVersionState:
            - Published
          operationType:
            - Created
      State: ENABLED
      Targets:
        - Arn: !GetAtt SqsQueue.Arn
          Id: CodeArtifactVulnerabilityScanner

  CodeArtifactInspectorFindingRule:
    Type: AWS::Events::Rule
    Properties:
      Name: CodeArtifactInspectorFinding
      EventPattern:
        source:
          - aws.inspector2
        detail-type:
          - Inspector2 Finding
        account:
          - !Ref "AWS::AccountId"
        region:
          - !Ref "AWS::Region"
        detail:
          severity:
            - CRITICAL
            - HIGH
            - MEDIUM
          status:
            - ACTIVE
          type:
            - PACKAGE_VULNERABILITY
      State: ENABLED
      Targets:
        - Arn: !GetAtt CodeArtifactInspectorFindingFunction.Arn
          Id: CodeArtifactInspectorFinding

  EventBridgeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CodeArtifactInspectorFindingFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CodeArtifactInspectorFindingRule.Arn

